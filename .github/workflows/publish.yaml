name: Publish

on:
  workflow_call:
    inputs:
      konfig_yaml_dir:
        description: "Path to directory which contains konfig.yaml"
        type: string
        required: true
        default: "."

jobs:
  # Updates submodule SHAs if necessary and prepares for publishing
  pre-publish:
    runs-on: ubuntu-latest
    outputs:
      has_changesets: ${{ steps.detect-changesets.outputs.has_changesets }}
      sdk_submodule_dirs: ${{ steps.sdk-submodules.outputs.dirs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Detect changeset files
        id: detect-changesets
        uses: ./.github/actions/private/detect-changesets
        with:
          konfig_yaml_dir: ${{ inputs.konfig_yaml_dir }}

      - name: Install konfig
        if: steps.detect-changesets.outputs.has_changesets == 'false'
        uses: ./.github/actions/install-cli

      - name: Detect SDK submodules
        if: steps.detect-changesets.outputs.has_changesets == 'false'
        id: sdk-submodules
        uses: ./.github/actions/private/detect-sdk-submodules
        with:
          konfig_yaml_dir: ${{ inputs.konfig_yaml_dir }}

      - name: Get version bump branch name
        id: branch-name
        if: >
          steps.detect-changesets.outputs.has_changesets == 'false' &&
          steps.sdk-submodules.outputs.dirs != ''
        uses: ./.github/actions/private/get-branch-name
        with:
          konfig_yaml_dir: ${{ inputs.konfig_yaml_dir }}

      - name: Set git config
        if: >
          steps.detect-changesets.outputs.has_changesets == 'false' &&
          steps.sdk-submodules.outputs.dirs != ''
        run: |
          git config --global user.email "passiv-ops@passiv.com"
          git config --global user.name "Passiv Ops"

      - name: Merge submodule version bump PRs
        if: >
          steps.detect-changesets.outputs.has_changesets == 'false' &&
          steps.sdk-submodules.outputs.dirs != ''
        uses: ./.github/actions/private/merge-submodule-prs
        with:
          konfig_yaml_dir: ${{ inputs.konfig_yaml_dir }}
          sdk_submodule_dirs: ${{ steps.sdk-submodules.outputs.dirs }}
          head: ${{ steps.branch-name.outputs.branch_name }}
          base: ${{ github.ref_name }}

      - name: Update submodule references
        if: >
          steps.detect-changesets.outputs.has_changesets == 'false' &&
          steps.sdk-submodules.outputs.dirs != ''
        uses: ./.github/actions/private/sync-submodules
        with:
          konfig_yaml_dir: ${{ inputs.konfig_yaml_dir }}
          sdk_submodule_dirs: ${{ steps.sdk-submodules.outputs.dirs }}
          push_to: ${{ github.ref_name }}

  publish:
    runs-on: ubuntu-latest
    needs: pre-publish
    if: needs.pre-publish.outputs.has_changesets == 'false'
    container: # runs in docker container
      image: konfigdev/test-and-publish:latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      PYPI_TOKEN_1: ${{ secrets.PYPI_TOKEN_1 }}
      PYPI_TOKEN_2: ${{ secrets.PYPI_TOKEN_2 }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      PACKAGIST_API_TOKEN: ${{ secrets.PACKAGIST_API_TOKEN }}
      GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: true

      - name: Install konfig
        uses: ./.github/actions/install-cli

      - name: Setup test env vars
        uses: ./.github/actions/private/inject-testing-env-vars
        with:
          TEST_ENV: ${{ secrets.TEST_ENV }}

      - name: Run tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_on: error
          command: cd ${{ inputs.konfig_yaml_dir }} && konfig test

      - name: Set git config
        run: |
          git config --global user.email "passiv-ops@passiv.com"
          git config --global user.name "Passiv Ops"
          repo=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          git config --global --add safe.directory /__w/$repo/$repo

      # If any SDKs are in submodules, then publishing might require pushing tags to the submodule repos
      - name: Set up SSH key for submodule access
        if: needs.pre-publish.outputs.sdk_submodule_dirs != ''
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.SUBMODULE_DEPLOY_KEY_PYTHON }}
            ${{ secrets.SUBMODULE_DEPLOY_KEY_TYPESCRIPT }}
            ${{ secrets.SUBMODULE_DEPLOY_KEY_JAVA }}
            ${{ secrets.SUBMODULE_DEPLOY_KEY_CSHARP }}
            ${{ secrets.SUBMODULE_DEPLOY_KEY_GO }}
            ${{ secrets.SUBMODULE_DEPLOY_KEY_PHP }}
            ${{ secrets.SUBMODULE_DEPLOY_KEY_PHP7 }}
            ${{ secrets.SUBMODULE_DEPLOY_KEY_RUBY }}
            ${{ secrets.SUBMODULE_DEPLOY_KEY_SWIFT }}

      - name: Setup GPG for signing
        if: env.GPG_PRIVATE_KEY && env.GPG_PASSPHRASE && env.GPG_KEY_ID
        run: |
          echo "$GPG_PRIVATE_KEY" | base64 -d | gpg --batch --passphrase "$GPG_PASSPHRASE" --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent
          gpg-connect-agent reloadagent /bye

      - name: Write settings.xml file for Java publishing
        uses: ./.github/actions/private/write-settings-xml
        with:
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
          ossrh_username: ${{ secrets.OSSRH_USERNAME }}
          ossrh_password: ${{ secrets.OSSRH_PASSWORD }}

      - name: Write .netrc file for Swift publishing
        run: |
          printf "machine trunk.cocoapods.org\n login ${{ secrets.COCOAPODS_SESSION_EMAIL }}\n password ${{ secrets.COCOAPODS_SESSION_PASSWORD }}" > ~/.netrc
          chmod 600 ~/.netrc

      # AG: temporarely disable publishing SDKs until we know the workflow is stable
      # - name: Publish SDKs
      #   uses: nick-fields/retry@v2
      #   with:
      #     timeout_minutes: 15
      #     max_attempts: 3
      #     retry_on: error
      #     command: cd ${{ inputs.konfig_yaml_dir }} && konfig publish --all --skipTests --tolerateRepublish --skipRemoteCheck --ci
